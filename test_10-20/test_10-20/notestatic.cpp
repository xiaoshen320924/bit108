#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//static 关键字
void test() {
	int a = 0;//1 1 1 1 ...
	//static int a=0; 1 2 3 4 ...
	// 内存分为 栈区 堆区 静态区 
	// 栈区 局部变量 函数参数 临时变量   进入作用域创建，出作用域释放
	// 堆区 动态分配内存 malloc calloc realloc free
	// 静态区 静态变量 全局变量    数据创建后，直到程序结束释放
	//局部变量被static 关键字 修饰后 这种变量就放在静态区，放在静态区的变量创建好后，直到程序结束才释放
	//本质上是修改了变量的存储位置，因为存储位置的差异，导致结果不一样
	//被 static 修饰 不影响作用域
	a++;
	printf("%d\n", a);
}
int main() {
	int i = 0;
	while (i < 10) {
		test();
		i++;
	}
	return 0;
}

//修饰全局变量
//全局变量本身是有外部链接属性的 在A文件中定义的变量，在B文件中可以通过链接使用
//但是如果全局变量被static 修饰，这个外部链接属性就变成了内部链接属性，这个全局变量就只能在自己所在的源文件中使用
//static 的修饰，会把外部链接属性变成内部链接属性，最终使得全局变量作用域变小


//修饰函数  限制作用域
//声明外部函数：extern int Add(int x, int y);
//用了static 修饰后，函数本身的外部连接属性变成了内部链接属性。使得函数只能在自己所在的源文件内部使用。

//只有全局变量才谈链接属性


